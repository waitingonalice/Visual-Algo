{"version":3,"sources":["components/Button.jsx","Pages/ErrorPage.jsx","components/ErrorMessage.js","Pages/Test.jsx","Data/data.js","Pages/Quiz.jsx","Pages/Result.jsx","SortingAlgorithms/mergeSortAlgo.js","SortingAlgorithms/quickSortAlgo.js","components/Modal.jsx","Pages/SortingVisual.jsx","SortingAlgorithms/bubbleSortAlgo.js","SortingAlgorithms/insertionSortAlgo.js","App.js","index.js"],"names":["GenerateButton","props","myClass","type","className","onClick","handleClick","colorScheme","size","leftIcon","disabled","children","QuizButton","ErrorPage","navigate","useNavigate","ErrorMessage","style","width","padding","marginBottom","borderRadius","backgroundColor","textAlign","color","textTransform","Test","question","setQuestion","name","score","setScore","useState","currentQuestion","setCurrentQuestion","options","setOptions","error","setError","selected","setSelected","handleCheckAns","idx","correct_answer","useEffect","sort","Math","random","handleShuffle","incorrect_answers","to","difficulty","category","map","handleSelectIdx","isIndeterminate","quickSortText","algoList","id","title","description","Categories","value","categories","Quiz","setName","fetch","setCategory","setDifficulty","placeholder","onChange","e","target","cat","text","lvl","Result","handleQuit","length","getMergeSortAnimations","array","animations","supportArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","floor","k","i","j","push","mergeSort","quickSort","low","high","pi","partition","pivot","temp","HelpModal","useDisclosure","isOpen","onOpen","onClose","React","scrollBehavior","variant","isCentered","mt","mb","fontWeight","fontSize","justifyContent","AlgoModal","index","setIndex","hasPrev","hasNext","algoDesc","pb","spacing","primaryColor","secondaryColor","handleRefreshPage","window","location","reload","randomArray","min","max","innerWidth","innerHeight","SortingVisual","setArray","trigger","setTrigger","animationSpeedMs","setAnimationSpeedMs","addEventListener","handleReset","setTimeout","handleBubbleSort","start","sorted","round","x","bubbleSort","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","newHeight","height","handleInsertionSort","curr","insertionSort","getInsertionSortAnimations","handleQuickSort","getQuickSortAnimations","as","Button","rightIcon","handleMergeSort","isDisabled","App","useColorMode","colorMode","toggleColorMode","ColorMode","icon","isRound","float","a","axios","get","data","results","basename","path","element","href","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b0f6e8f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from '@chakra-ui/react';\r\nimport './Button.css'\r\nexport function GenerateButton(props) {\r\n    const myClass = `button ${props.type}`\r\n    return (\r\n        <Button\r\n            className={myClass}\r\n            onClick={props.handleClick}\r\n            colorScheme='gray' size='sm'\r\n            leftIcon={props.leftIcon}\r\n            disabled = {props.disabled}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n        ); \r\n}\r\n\r\nexport function QuizButton({handleClick,myClass,disabled,children}) {\r\n    return (\r\n        <button\r\n            onClick={handleClick}\r\n            type='button'\r\n            className={myClass}\r\n            disabled = {disabled}\r\n        >\r\n            \r\n            {children}\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\nimport { GenerateButton } from '../components/Button'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nfunction ErrorPage() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <div>\r\n\t\t<GenerateButton handleClick = {()=>navigate('/')}>\r\n\t\t\tBack to Home page\r\n\t\t</GenerateButton>\r\n\t\t<div>\r\n\t\t\tERROR! Page not found!\r\n\t\t</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorPage","import React from \"react\";\r\n\r\n//From: https://github.com/piyush-eon/Reactjs-Quiz-App/blob/master/src/components/ErrorMessage/ErrorMessage.js\r\nfunction ErrorMessage({ children }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                padding: 10,\r\n                marginBottom: 10,\r\n                borderRadius: 4,\r\n                backgroundColor: \"orangered\",\r\n                textAlign: \"center\",\r\n                color: \"white\",\r\n                textTransform: \"capitalize\",\r\n            }}\r\n        >\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./test.css\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\nimport { CircularProgress, Center } from \"@chakra-ui/react\";\r\nimport { GenerateButton, QuizButton } from \"../components/Button\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\n\r\nconst Test = ({ question, setQuestion, name, score = 0, setScore }) => {\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [options, setOptions] = useState();\r\n    const [error, setError] = useState(false);\r\n    const [selected, setSelected] = useState();\r\n    let navigate = useNavigate();\r\n\r\n    //for every question, fetch its options\r\n    useEffect(() => {\r\n        setOptions(\r\n            question &&\r\n                handleShuffle([\r\n                    question[currentQuestion].correct_answer,\r\n                    ...question[currentQuestion].incorrect_answers,\r\n                ])\r\n        );\r\n    }, [currentQuestion, question]);\r\n\r\n    function handleShuffle(options) {\r\n        return options.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    function handleCheckAns(idx) {\r\n        if (\r\n            selected === idx &&\r\n            selected === question[currentQuestion].correct_answer\r\n        ) {\r\n            return \"correct\";\r\n        } else if (\r\n            selected === idx &&\r\n            selected !== question[currentQuestion].correct_answer\r\n        ) {\r\n            return \"incorrect\";\r\n        } else {\r\n            return \"quiz-button\";\r\n        }\r\n    }\r\n\r\n    function handleSelectIdx(idx) {\r\n        setSelected(idx);\r\n        setError(false);\r\n    }\r\n\r\n    function handleNextClick() {\r\n        if (!selected) {\r\n            setError(true);\r\n        } else if (currentQuestion > 8) {\r\n            if (selected === question[currentQuestion].correct_answer) {\r\n                setError(false);\r\n                setScore(score + 1);\r\n            } else if (selected !== question[currentQuestion].correct_answer) {\r\n                setError(false);\r\n                setScore(score + 0);\r\n            }\r\n            navigate(\"/results\");\r\n        } else if (selected === question[currentQuestion].correct_answer) {\r\n            setError(false);\r\n            setScore(score + 1);\r\n            setCurrentQuestion(currentQuestion + 1);\r\n            setSelected();\r\n        } else if (selected !== question[currentQuestion].correct_answer) {\r\n            setError(false);\r\n            setScore(score + 0);\r\n            setCurrentQuestion(currentQuestion + 1);\r\n            setSelected();\r\n        }\r\n    }\r\n\r\n    function handleQuit() {\r\n        setQuestion();\r\n        setCurrentQuestion(0);\r\n        setScore();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to=\"/quiz\">\r\n                <div className=\"quiz-title\" onClick={handleQuit}>\r\n                    Visual Algo Quiz\r\n                </div>\r\n            </Link>\r\n            <div className=\"test-page\">\r\n                <Center>\r\n                    <div className=\"username\">Welcome, {name}</div>\r\n                </Center>\r\n\r\n                <Center>\r\n                    <div className=\"questions-container\">\r\n                        {question ? (\r\n                            <>\r\n                                <div className=\"quiz-category\">\r\n                                    <span className=\"difficulty\">\r\n                                        Difficulty:{\" \"}\r\n                                        {question[currentQuestion].difficulty}\r\n                                    </span>\r\n                                    <div>\r\n                                        {question[currentQuestion].category}\r\n                                    </div>\r\n                                    <div>Question: {currentQuestion + 1}</div>\r\n                                    <div className=\"question\">\r\n                                        {question[currentQuestion].question}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"options\">\r\n                                    {options &&\r\n                                        options.map((idx) => (\r\n                                            <QuizButton\r\n                                                myClass={handleCheckAns(idx)}\r\n                                                key={idx}\r\n                                                handleClick={() =>\r\n                                                    handleSelectIdx(idx)\r\n                                                }\r\n                                                disabled={selected}\r\n                                            >\r\n                                                {idx}\r\n                                            </QuizButton>\r\n                                        ))}\r\n                                    {error && (\r\n                                        <ErrorMessage>\r\n                                            {\" \"}\r\n                                            Please choose an option{\" \"}\r\n                                        </ErrorMessage>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"next-button\">\r\n                                    <GenerateButton\r\n                                        handleClick={handleNextClick}\r\n                                    >\r\n                                        Next\r\n                                    </GenerateButton>\r\n                                </div>\r\n                            </>\r\n                        ) : (\r\n                            <div className=\"circular\">\r\n                                <CircularProgress\r\n                                    isIndeterminate\r\n                                    color=\"blue.300\"\r\n                                    size=\"120px\"\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </Center>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Test;\r\n","const Categories = [\r\n    { value: 18, categories: 'Computer Science' },\r\n\r\n]\r\nlet quickSortText = \r\n\t[\r\n\t\t'Quicksort is a divide and conquer algorithm that is regarded as the best sorting algorithm.', <br />,<br/>,\r\n\t\t'Use cases: Typically used for information searching as it is able to deal well with huge list of items. It is a cache-friendly algorithm as it has a good locality of reference when used for arrays (space saving).',<br />,<br />,\r\n\t\t'Algorithm steps: ', <br/>,<br/>,\r\n\t\t'1. Pick an element, called a pivot, from the array.', <br/>,\r\n\t\t'2. Partitioning: reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). ',<br />,\r\n\t\t'After this partitioning, the pivot is in its final position. This is called the partition operation.',<br/>,\r\n\t\t'3. Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values.', <br/>,<br />,\r\n\t\t'Worst case time complexity: O(n ^ 2)'\r\n]\r\n\r\nlet mergeSortText = \r\n\t[\r\n\t\t'Merge Sort is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output.', <br />,\r\n\t\t'Merge sort is a divide and conquer algorithm', <br />, <br />,\r\n\t\t'Use cases: Typically used when the data structure does not support random access, an example is linked list. Merge sort also uses additional storage for sorting the auxillary array.',<br/>,<br/>,\r\n\t\t'Algorithm Steps: ', <br />,<br />,\r\n\t\t'Step 1: Divide the list into the smallest unit (1 element),  ', <br />,\r\n\t\t'Step 2: Then compare each element with the adjacent list to sort and merge the two adjacent lists.', <br />,<br />,\r\n\t\t'Worst case time complexity: O(n log n)'\r\n\t]\r\n\r\nlet bubbleSortText = \r\n\t[\r\n\t\t'Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.', <br />, <br />,\r\n\t\t'Use Cases: Bubble sort is a very simple algorithm to implement that is often used for very small data sets. Insertion sort is often used in place of bubble sort because of its similarities in complexity and is slightly faster. One advantage bubble sort has over other more complex algorithms is that it has the ability to detect whether data is sorted efficiently.', <br />,<br />,\r\n\t\t'Algorithm Steps:', <br />,<br />,\r\n\t\t'Step 1: Start with first element and checks adjacent element', <br />,\r\n\t\t'Step 2: If current element is in wrong order of adjacent element, swap', <br />, <br />,\r\n\t\t'Worst case time complexity: O(n^2)'\r\n\r\n\t\t\r\n\t]\r\n\r\nlet insertionSortText = \r\n\t[\r\n\t\t'Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quick sort, heap sort, or merge sort.', <br />,<br />,\r\n\t\t'Use cases: Typically used when the number of elements is small. It can also be useful when input array is almost sorted as it has a fast best-case running time.', <br />,\r\n\t\t'The benefits of using insertion sort is that it has a low overhead, is fairly stable and it is not a complex algorithm.', <br />,\r\n\t\t'Algorithm steps:', <br />, <br />,\r\n\t\t'1: Iterate from arr[1] to arr[n] over the array.', <br />,\r\n\t\t'2: Compare the current element (key) to its predecessor.', <br />,\r\n\t\t'3: If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped element.', <br />, <br />,\r\n\t\t'Worst case time complexity: O(n^2)'\r\n\t\t\r\n    ]\r\n\r\n    \r\nexport const algoList = [\r\n\t{\t\r\n\t\tid: 1,\r\n\t\ttitle: 'Merge Sort',\r\n\t\tdescription: mergeSortText\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\ttitle: 'Quick Sort',\r\n\t\tdescription: quickSortText\r\n\t\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\ttitle: 'Bubble sort',\r\n\t\tdescription: bubbleSortText\r\n\t\t\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\ttitle: 'Insertion sort',\r\n\t\tdescription: insertionSortText\r\n\t}\r\n]\r\n    \r\n\r\n\r\nexport default Categories","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { GenerateButton } from \"../components/Button\";\r\nimport { FaHome } from \"react-icons/fa\";\r\nimport { Input, VStack, Select, Center } from \"@chakra-ui/react\";\r\nimport \"./quiz.css\";\r\nimport Categories from \"../Data/data.js\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\n\r\nfunction Quiz({ name, setName, fetch }) {\r\n    const [category, setCategory] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    const [difficulty, setDifficulty] = useState(\"\");\r\n    let navigate = useNavigate();\r\n\r\n    const difficultyLevel = [\r\n        {\r\n            value: \"easy\",\r\n            text: \"Easy\",\r\n        },\r\n        {\r\n            value: \"medium\",\r\n            text: \"Medium\",\r\n        },\r\n        {\r\n            value: \"hard\",\r\n            text: \"Hard\",\r\n        },\r\n    ];\r\n    //From: https://github.com/piyush-eon/Reactjs-Quiz-App/blob/master/src/Pages/Home/Home.js\r\n    const handleSubmit = () => {\r\n        if (!name || !category || !difficulty) {\r\n            setError(true);\r\n            return;\r\n        } else {\r\n            setError(false);\r\n            fetch(category, difficulty);\r\n            navigate(\"/test\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"parent-quiz-container\">\r\n            <div className=\"quiz-title\">Visual Algo Quiz</div>\r\n            <Center>\r\n                <div className=\"select-settings-card\">\r\n                    <VStack>\r\n                        <Input\r\n                            className=\"input\"\r\n                            placeholder=\"Enter Your Name\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        />\r\n\r\n                        <Select\r\n                            placeholder=\"Select Topic\"\r\n                            onChange={(e) => setCategory(e.target.value)}\r\n                        >\r\n                            {Categories.map((cat) => {\r\n                                return (\r\n                                    <option\r\n                                        key={cat.categories}\r\n                                        value={cat.value}\r\n                                    >\r\n                                        {cat.categories}\r\n                                    </option>\r\n                                );\r\n                            })}\r\n                        </Select>\r\n                        <Select\r\n                            placeholder=\"Select Difficulty\"\r\n                            onChange={(e) => setDifficulty(e.target.value)}\r\n                        >\r\n                            {difficultyLevel.map((lvl) => {\r\n                                return (\r\n                                    <option key={lvl.value} value={lvl.value}>\r\n                                        {lvl.text}{\" \"}\r\n                                    </option>\r\n                                );\r\n                            })}\r\n                        </Select>\r\n\r\n                        {error && (\r\n                            <ErrorMessage>\r\n                                Fill in all relevant fields\r\n                            </ErrorMessage>\r\n                        )}\r\n\r\n                        <div className=\"buttons\">\r\n                            <GenerateButton\r\n                                leftIcon={<FaHome />}\r\n                                handleClick={() => navigate(\"/\")}\r\n                            >\r\n                                Back to home page\r\n                            </GenerateButton>\r\n                            <GenerateButton\r\n                                handleClick={() => {\r\n                                    handleSubmit();\r\n                                }}\r\n                            >\r\n                                Proceed\r\n                            </GenerateButton>\r\n                        </div>\r\n                    </VStack>\r\n                </div>\r\n            </Center>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n","import \"./Result.css\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport { GenerateButton } from \"../components/Button\";\r\nimport { FaHome } from \"react-icons/fa\";\r\nimport { ImLoop } from \"react-icons/im\";\r\n\r\nconst Result = ({ name, score, setScore, question, setQuestion }) => {\r\n    let navigate = useNavigate();\r\n\r\n    const numOfQuestions = () => {\r\n        if (!question) {\r\n            return 0;\r\n        } else {\r\n            return question.length;\r\n        }\r\n    };\r\n\r\n    const handleQuit = () => {\r\n        setScore();\r\n        setQuestion();\r\n    };\r\n\r\n    return (\r\n        <div className=\"result-container\">\r\n            <Link to=\"/quiz\">\r\n                <div className=\"quiz-title\" onClick={handleQuit}>\r\n                    Visual Algo Quiz\r\n                </div>\r\n            </Link>\r\n            <div className=\"result-card\">\r\n                <div className=\"result-page-username\">{name}, You Scored</div>\r\n                <div className=\"result-page-result\">\r\n                    {score} out of {numOfQuestions()}\r\n                </div>\r\n\r\n                <div className=\"result-page-buttons\">\r\n                    <GenerateButton\r\n                        leftIcon={<FaHome />}\r\n                        handleClick={() => navigate(\"/\")}\r\n                    >\r\n                        Back to home page\r\n                    </GenerateButton>\r\n\r\n                    <Link to=\"/quiz\">\r\n                        <GenerateButton\r\n                            leftIcon={<ImLoop />}\r\n                            handleClick={handleQuit}\r\n                        >\r\n                            Try Again\r\n                        </GenerateButton>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Result;\r\n","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if(array.length<=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array];\r\n    mergeSortHelper(array, 0, array.length-1, supportArray, animations);\r\n    return animations; \r\n}\r\n\r\n//from: https://www.youtube.com/watch?v=pFXYym4Wbkc&t=2137s\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, supportArray, animations){\r\n    if(startIdx===endIdx){\r\n        return;\r\n    }\r\n    const middleIdx = Math.floor((startIdx+endIdx)/2);\r\n    mergeSortHelper(supportArray, startIdx, middleIdx, mainArray, animations); \r\n    //swaps first half of mainArray with supportArray\r\n    mergeSortHelper(supportArray, middleIdx+1, endIdx, mainArray, animations); \r\n    //swaps second half of mainArray with SupportArray\r\n    mergeSort(mainArray,startIdx,middleIdx,endIdx,supportArray,animations);\r\n}\r\n\r\nfunction mergeSort(mainArray,startIdx,middleIdx,endIdx,supportArray,animations){\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n\r\n    //operation 1\r\n    while(i <= middleIdx && j <=endIdx){\r\n        animations.push([i,j]); //push index i and j into animations array once to change color \r\n        animations.push([i,j]); //push index i and j into animations array a second time to revert color\r\n        if(supportArray[i]<=supportArray[j]){\r\n            animations.push([k,supportArray[i]]);\r\n            mainArray[k++] = supportArray[i++];\r\n            //swap then increment to the next index\r\n        }else{\r\n            animations.push([k,supportArray[j]]);\r\n            mainArray[k++] = supportArray[j++];\r\n        }\r\n    }\r\n    //operation 2\r\n    while(i<=middleIdx){\r\n        animations.push([i,i]);\r\n        animations.push([i,i]);\r\n        animations.push([k,supportArray[i]]);\r\n        mainArray[k++] = supportArray[i++];\r\n    }\r\n    //operation 3\r\n    while(j<=endIdx){\r\n        animations.push([j,j]);\r\n        animations.push([j,j]);\r\n        animations.push([k,supportArray[j]]);\r\n        mainArray[k++] = supportArray[j++];\r\n    }\r\n}\r\n  ","export function getQuickSortAnimations(array){\r\n    const animations =[];\r\n    if(array.length <=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array]//clones array;\r\n    quickSort(0, array.length-1, supportArray, animations);\r\n    return animations;\r\n}\r\n\r\n//do quicksort with recursion \r\nconst quickSort = (low, high, array, animations) => {\r\n    if (low < high) {\r\n        let pi = partition(low, high , array, animations);\r\n        quickSort(low, pi - 1, array, animations);\r\n        quickSort(pi + 1, high, array, animations); \r\n    }\r\n}\r\n\r\nconst partition = (low, high, array, animations) => {\r\n    let i = low, pivot = array[high], j = low;\r\n    //at each iteration of j,\r\n    //swap j with i if j < pivot value, separating values smaller and larger than pivot\r\n    \r\n    for (j; j < array[high - 1]; j++) {\r\n        if (array[j] < pivot) {\r\n            animations.push([i, j, true]);\r\n            animations.push([i, j, true]);\r\n            animations.push([j, i, true]);\r\n            animations.push([j, i, true]);\r\n            animations.push([i, array[j]]);\r\n            animations.push([j, array[i]]);\r\n            let temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    //main partition -- once j reaches array[high -1], swap pivot to value[i];\r\n    animations.push([i, high, true]);\r\n    animations.push([i, high, true]);\r\n    animations.push([high, i, true]);\r\n    animations.push([high, i, true]);\r\n    animations.push([i, array[high]]);\r\n    animations.push([high, array[i]]);\r\n    let temp = array[i];\r\n    array[i] = array[high];\r\n    array[high] = temp;\r\n    return i; \r\n}\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Modal, ModalOverlay, ModalCloseButton, ModalContent, ModalFooter, ModalBody, ModalHeader, HStack, Heading } from '@chakra-ui/react'\r\nimport {algoList} from '../Data/data.js'\r\nimport { Button, Text, Box } from '@chakra-ui/react'\r\nimport { GenerateButton } from './Button'\r\nimport { useDisclosure } from '@chakra-ui/react'\r\nimport { IoMdHelp } from 'react-icons/io'\r\nimport {FaRegLightbulb} from \"react-icons/fa\"\r\n\r\nexport function HelpModal() {\r\n\tconst { isOpen, onOpen, onClose } = useDisclosure()\r\n\tconst [scrollBehavior, setScrollBehavior] = React.useState('inside')\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Button leftIcon={<IoMdHelp />} colorScheme='gray' size='sm' variant='solid' onClick={onOpen}>\r\n\t\t\t\tHelp\r\n\t\t\t</Button>\r\n\r\n\t\t\t<Modal isOpen={isOpen} onClose={onClose} isCentered scrollBehavior={scrollBehavior}>\r\n\t\t\t\t<ModalOverlay />\r\n\t\t\t\t<ModalContent>\r\n\t\t\t\t\t<ModalCloseButton />\r\n\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t<Box mt={\"1rem\"} mb={'0.5rem'}>\r\n\t\t\t\t\t\t\t<Text fontWeight={'bold'} fontSize=\"20\">Visual Algo Introduction</Text>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t \r\n\t\t\t\t\t\t<Box mb=\"1rem\">\r\n\t\t\t\t\t\t\tVisual Algo is an interactive web application that enables learners to interact with algorithms through visual animations instead of just reading about them. \r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t<Text fontWeight={\"bold\"} fontSize={20} mb = '0.5rem'>Site Guide</Text>\r\n\t\t\t\t\t\t<Text fontWeight='bold'>\r\n\t\t\t\t\t\t\tGenerate New Array \r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<Box mb=\"1rem\">\r\n\t\t\t\t\t\t\tRandomly generates new dataset.                                                                                                                                                                                  \r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t<Text fontWeight='bold'>\r\n\t\t\t\t\t\t\tReload Page\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<Box mb=\"1rem\">\r\n\t\t\t\t\t\t\tRefreshes the page to stop the algorithm from running.\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t<Text fontWeight='bold'>\r\n\t\t\t\t\t\t\tSorting Algorithms\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<Box mb=\"1rem\">\r\n\t\t\t\t\t\t\tShows a list of sorting algorithms, pressing any algorithm in the list will trigger the algorithm to start running.\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t<Text fontWeight='bold'>\r\n\t\t\t\t\t\t\tAlgorithm tips\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<Box mb=\"1rem\">\r\n\t\t\t\t\t\t\tProvides a brief description of how every algorithm functions and its uses.\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Text fontWeight='bold'>\r\n\t\t\t\t\t\t\tTest Your Knowledge\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t<Box mb=\"1rem\">\r\n\t\t\t\t\t\t\tRedirects to quiz page.\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t<ModalFooter justifyContent={'center'}>\r\n\t\t\t\t\t\t<GenerateButton myClass = 'closeBtn' handleClick={onClose}>\r\n\t\t\t\t\t\t\tClose\r\n\t\t\t\t\t\t</GenerateButton>\r\n\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t</ModalContent>\r\n\t\t\t</Modal>\r\n\t\t</>\r\n\t \r\n\t)\r\n}\r\n\r\nexport function AlgoModal() {\r\n\tconst [index, setIndex] = useState(0)\r\n\tconst { isOpen, onOpen, onClose } = useDisclosure()\r\n\tconst [scrollBehavior, setScrollBehavior] = React.useState('inside')\r\n\t\r\n\tlet hasPrev = index > 0\r\n\tlet hasNext = index < algoList.length-1\r\n\t\t\r\n\tfunction handleNextClick() {\r\n\t\tif (hasNext) {\r\n\t\t\tsetIndex(index + 1) \r\n\t\t}\r\n\t}\r\n\tfunction handlePrevClick() {\r\n\t\tif (hasPrev) {\r\n\t\t\tsetIndex(index-1)\r\n\t\t}\r\n\t}\r\n\t\r\n    \r\n\tlet algoDesc = algoList[index]\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<GenerateButton myClass='algoHelp' handleClick={onOpen} leftIcon = {<FaRegLightbulb/>}> Algorithm Tips </GenerateButton>\r\n\r\n\t\t\t<Modal isOpen={isOpen} onClose={onClose} isCentered scrollBehavior={scrollBehavior} size ={'lg'} key ={algoDesc.id}>\r\n\t\t\t\t<ModalOverlay />\r\n\t\t\t\t<ModalContent>\r\n\t\t\t\t\t<ModalCloseButton/>\r\n\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t<ModalHeader>\r\n\t\t\t\t\t\t\t{algoDesc.title}\r\n\t\t\t\t\t\t</ModalHeader>\r\n\t\t\t\t\t\t<Heading pb={3} fontSize= {16}>\r\n\t\t\t\t\t\t\tDescription {index + 1} of {algoList.length}\r\n\t\t\t\t\t\t</Heading>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t{algoDesc.description}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t<HStack spacing = '10px'>\r\n\t\t\t\t\t\t\t<GenerateButton myClass='closeBtn' handleClick={onClose} >Close</GenerateButton>\r\n\t\t\t\t\t\t\t<GenerateButton myClass = 'prevBtn' handleClick ={handlePrevClick} disabled={!hasPrev}>Previous</GenerateButton>\r\n\t\t\t\t\t\t\t<GenerateButton myClass='nextBtn' handleClick={handleNextClick} disabled = {!hasNext}>Next</GenerateButton>\r\n\t\t\t\t\t\t</HStack>\r\n\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t</ModalContent>\r\n\t\t\t</Modal>\r\n\t\t</>\r\n\t\t\t\r\n\t);\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/mergeSortAlgo.js\";\r\nimport { getBubbleSortAnimations } from \"../SortingAlgorithms/bubbleSortAlgo\";\r\nimport { getInsertionSortAnimations } from \"../SortingAlgorithms/insertionSortAlgo\";\r\nimport { getQuickSortAnimations } from \"../SortingAlgorithms/quickSortAlgo\";\r\nimport {\r\n    MenuItem,\r\n    VStack,\r\n    Menu,\r\n    MenuButton,\r\n    MenuList,\r\n    Button,\r\n    Select,\r\n} from \"@chakra-ui/react\";\r\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { GenerateButton } from \"../components/Button.jsx\";\r\nimport { AlgoModal } from \"../components/Modal.jsx\";\r\nimport { MdQuiz } from \"react-icons/md\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst primaryColor = \"CornflowerBlue\";\r\nconst secondaryColor = \"Aquamarine\";\r\n\r\nfunction SortingVisual() {\r\n    const [array, setArray] = useState(randomArray());\r\n    const [trigger, setTrigger] = useState(false);\r\n    const [animationSpeedMs, setAnimationSpeedMs] = useState(5);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", () => {\r\n            handleReset();\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (trigger) {\r\n            setTimeout(() => {\r\n                setTrigger(false);\r\n            }, 10000);\r\n        }\r\n    }, [trigger]);\r\n\r\n    const handleReset = () => {\r\n        setTrigger(false);\r\n        setArray(randomArray());\r\n    };\r\n\r\n    //handleMergeSort() from: https://www.youtube.com/watch?v=pFXYym4Wbkc&t=2137s\r\n    const handleMergeSort = () => {\r\n        const animations = getMergeSortAnimations(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? secondaryColor : primaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }\r\n    };\r\n    const handleBubbleSort = () => {\r\n        setTrigger(true);\r\n        const animations = getBubbleSortAnimations(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = animations[i][2];\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 2 === 0 ? secondaryColor : primaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleInsertionSort = () => {\r\n        setTrigger(true);\r\n        const animations = getInsertionSortAnimations(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = animations[i][2];\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 2 === 0 ? secondaryColor : primaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleQuickSort = () => {\r\n        setTrigger(true);\r\n        const animations = getQuickSortAnimations(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = animations[i][2];\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? primaryColor : secondaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <VStack>\r\n            <div className=\"title\">Visual Algo</div>\r\n            <div className=\"feature-buttons\">\r\n                <GenerateButton\r\n                    myClass=\"resetArray\"\r\n                    handleClick={() => handleRefreshPage()}\r\n                >\r\n                    Reload Page\r\n                </GenerateButton>\r\n                <GenerateButton\r\n                    myClass=\"generateNewArray\"\r\n                    handleClick={() => handleReset()}\r\n                >\r\n                    Generate New Array\r\n                </GenerateButton>\r\n\r\n                <Menu>\r\n                    <MenuButton\r\n                        id=\"MenuButton\"\r\n                        as={Button}\r\n                        rightIcon={<ChevronDownIcon />}\r\n                        colorScheme=\"gray\"\r\n                        size={\"sm\"}\r\n                        disabled={trigger}\r\n                    >\r\n                        Algorithms\r\n                    </MenuButton>\r\n                    <MenuList>\r\n                        <MenuItem onClick={() => handleQuickSort()}>\r\n                            Quick Sort\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => handleInsertionSort()}>\r\n                            Insertion Sort\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => handleBubbleSort()}>\r\n                            Bubble Sort\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => handleMergeSort()}>\r\n                            Merge Sort\r\n                        </MenuItem>\r\n                    </MenuList>\r\n                </Menu>\r\n\r\n                <div>\r\n                    <Select\r\n                        className=\"speed\"\r\n                        size={\"sm\"}\r\n                        placeholder={\"Speed\"}\r\n                        variant=\"filled\"\r\n                        isDisabled={trigger}\r\n                        onChange={(e) => setAnimationSpeedMs(e.target.value)}\r\n                    >\r\n                        <option value={5}>5ms</option>\r\n                        <option value={50}>50ms</option>\r\n                        <option value={100}>100ms</option>\r\n                    </Select>\r\n                </div>\r\n\r\n                <AlgoModal />\r\n                <Link to=\"/quiz\">\r\n                    <GenerateButton leftIcon={<MdQuiz />}>\r\n                        Test Your Knowledge\r\n                    </GenerateButton>\r\n                </Link>\r\n            </div>\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{\r\n                            backgroundColor: primaryColor,\r\n                            height: `${value}px`,\r\n                        }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n        </VStack>\r\n    );\r\n}\r\nconst handleRefreshPage = () => {\r\n    window.location.reload(true);\r\n};\r\n\r\nconst randomArray = () => {\r\n    const array = [];\r\n    for (let i = 0; i < window.innerWidth / 16; i++) {\r\n        array.push(randomIntFromInterval(10, window.innerHeight / 2));\r\n    }\r\n    return array;\r\n};\r\n\r\n//FROM: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisual;\r\n","export function getBubbleSortAnimations(array){\r\n    const animations =[];\r\n    if(array.length <=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array]//clones array;\r\n    bubbleSort(0,supportArray,animations);\r\n    return animations;\r\n}\r\n\r\n//1. create array to hold values\r\n//2. while the array isnt sorted, iterate through array\r\n//3. if the value of index i > i+1, swap\r\n\r\nfunction bubbleSort(start,array,animations){\r\n    let i = start;\r\n    let j = array.length-1;\r\n    let sorted = false;\r\n    let round = 0;\r\n    while(!sorted){\r\n        sorted = true;\r\n        for(let x = i; x < j-round; x++){\r\n            animations.push([x, x + 1, true]); \r\n            animations.push([x, x + 1, true]); \r\n            \r\n            if(array[x]>array[x+1]){\r\n                animations.push([x, array[x + 1]]);\r\n                animations.push([x + 1, array[x]]);\r\n                \r\n                let temp = array[x];\r\n                array[x] = array[x + 1];\r\n                array[x + 1] = temp;\r\n                sorted = false;  \r\n            }   \r\n            \r\n        }\r\n        round++;\r\n    }    \r\n}","export function getInsertionSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length<=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array]; //clones array\r\n    insertionSort(supportArray,animations);\r\n    return animations;\r\n}\r\n// }\r\n//1. iterate from arr[1] to arr [n] over the array\r\n//2. compare current element (key) to its predecessor \r\n//3. if key element is small than its predecessor, compare it to the elements before\r\n//4. move greater one position up to make space for swapped element. \r\n\r\nfunction insertionSort(array,animations){\r\n\r\n    for(let i = 1;i<array.length;i++){\r\n        let temp = array[i];\r\n        let curr = i;\r\n        animations.push([curr, curr - 1,true]);\r\n        animations.push([curr, curr - 1, true]);\r\n        \r\n        while(curr > 0 && array[curr - 1] > temp){\r\n            animations.push([curr, curr - 1,true]);\r\n            animations.push([curr, curr - 1,true]);\r\n            animations.push([curr, array[curr -1]]);\r\n            animations.push([curr, array[curr - 1]]);\r\n            \r\n            array[curr] = array[curr-1];\r\n            curr--;\r\n            \r\n        }\r\n        animations.push([curr, temp]);\r\n        animations.push([curr, temp]);\r\n        \r\n        array[curr] = temp;\r\n    }\r\n\r\n} \r\n\r\n","import React from \"react\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport Test from \"./Pages/Test\";\nimport Quiz from \"./Pages/Quiz\";\nimport Result from \"./Pages/Result\";\nimport SortingVisual from \"./Pages/SortingVisual\";\nimport \"./app.css\";\nimport { useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { IconButton, useColorMode, Center } from \"@chakra-ui/react\";\nimport { FaSun, FaMoon } from \"react-icons/fa\";\nimport { HelpModal } from \"./components/Modal\";\nimport { BsGithub } from \"react-icons/bs\";\nimport axios from \"axios\";\n\nexport default function App() {\n    const { colorMode, toggleColorMode } = useColorMode();\n    const [name, setName] = useState(\"\");\n    const [question, setQuestion] = useState();\n    const [score, setScore] = useState(0);\n\n    function ColorMode() {\n        return (\n            <IconButton\n                icon={colorMode === \"light\" ? <FaSun /> : <FaMoon />}\n                isRound=\"true\"\n                size=\"md\"\n                onClick={toggleColorMode}\n                float={\"right\"}\n            />\n        );\n    }\n    //fetch data from open trivia db\n    //From: https://github.com/piyush-eon/Reactjs-Quiz-App/blob/master/src/App.js\n    const fetch = async (category, difficulty) => {\n        const { data } = await axios.get(\n            `https://opentdb.com/api.php?amount=10&type=multiple${\n                category && `&category=${category}`\n            }${difficulty && `&difficulty=${difficulty}`}`\n        );\n\n        setQuestion(data.results);\n    };\n\n    return (\n        <Router basename=\"Visual-Algo\">\n            <div className=\"main\">\n                <div className=\"header\">\n                    <HelpModal />\n                    <ColorMode />\n                </div>\n                <div className=\"body\">\n                    <Routes>\n                        <Route path=\"/\" element={<SortingVisual />} />\n                        <Route\n                            path=\"/quiz\"\n                            element={\n                                <Quiz\n                                    name={name}\n                                    setName={setName}\n                                    fetch={fetch}\n                                />\n                            }\n                        />\n\n                        <Route\n                            path=\"/test\"\n                            element={\n                                <Test\n                                    question={question}\n                                    setQuestion={setQuestion}\n                                    name={name}\n                                    score={score}\n                                    setScore={setScore}\n                                />\n                            }\n                        />\n\n                        <Route\n                            path=\"/results\"\n                            element={\n                                <Result\n                                    name={name}\n                                    score={score}\n                                    setScore={setScore}\n                                    question={question}\n                                    setQuestion={setQuestion}\n                                />\n                            }\n                        />\n\n                        <Route path=\"*\" element={<ErrorPage />} />\n                    </Routes>\n                </div>\n                <Center className=\"footer\">\n                    <div className=\"links\">\n                        Links:\n                        <a\n                            id=\"github-link\"\n                            href=\"https://github.com/waitingonalice/VisualAlgo\"\n                        >\n                            Github\n                            <div id=\"gh-icon\">\n                                <BsGithub size={20} />\n                            </div>\n                        </a>\n                    </div>\n                </Center>\n            </div>\n        </Router>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider, ColorModeScript, extendTheme } from \"@chakra-ui/react\"\n\nimport react from 'react';\n\nconst config = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n}\n\nconst theme = extendTheme({\n  config,\n});\n\nReactDOM.render(\n  <react.StrictMode>\n    <ChakraProvider>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <App />\n    </ChakraProvider>\n  </react.StrictMode>\n  ,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}