{"version":3,"sources":["SortingAlgorithms/mergeSortAlgo.js","SortingAlgorithms/quickSortAlgo.js","components/SortingVisual.jsx","SortingAlgorithms/bubbleSortAlgo.js","SortingAlgorithms/insertionSortAlgo.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","supportArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","mergeSort","quickSort","low","high","pi","partition","pivot","temp","primaryColor","secondaryColor","SortingVisual","useState","randomArray","setArray","useEffect","console","log","handleBubbleSort","start","sorted","round","comparingElement","bubbleSort","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","handleInsertionSort","container","insertionSort","getInsertionSortAnimations","handleQuickSort","getQuickSortAnimations","GenerateNewArrayButton","generateProp","colorScheme","size","onClick","ResetArrayButton","DropDownMenu","as","Button","rightIcon","handleMergeSort","display","pt","spacing","window","location","reload","pos","top","map","value","idx","className","min","max","innerWidth","innerHeight","random","App","useColorMode","colorMode","toggleColorMode","p","icon","isRound","alignSelf","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d69ba28f.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if(array.length<=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array];\r\n    mergeSortHelper(array, 0, array.length-1, supportArray, animations);\r\n    return animations; \r\n}\r\n\r\n//swaps mainArray with supportArray during merge sort\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, supportArray, animations){\r\n    if(startIdx===endIdx){\r\n        return;\r\n    }\r\n    const middleIdx = Math.floor((startIdx+endIdx)/2);\r\n    mergeSortHelper(supportArray, startIdx, middleIdx, mainArray, animations); \r\n    //swaps first half of mainArray with supportArray\r\n    mergeSortHelper(supportArray, middleIdx+1, endIdx, mainArray, animations); \r\n    //swaps second half of mainArray with SupportArray\r\n    mergeSort(mainArray,startIdx,middleIdx,endIdx,supportArray,animations);\r\n}\r\n\r\nfunction mergeSort(mainArray,startIdx,middleIdx,endIdx,supportArray,animations){\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n\r\n    //operation 1\r\n    while(i <= middleIdx && j <=endIdx){\r\n        animations.push([i,j]); //push index i and j into animations array once to change color \r\n        animations.push([i,j]); //push index i and j into animations array a second time to revert color\r\n        if(supportArray[i]<=supportArray[j]){\r\n            animations.push([k,supportArray[i]]);\r\n            mainArray[k++] = supportArray[i++];\r\n            //swap then increment to the next index\r\n        }else{\r\n            animations.push([k,supportArray[j]]);\r\n            mainArray[k++] = supportArray[j++];\r\n        }\r\n    }\r\n    //operation 2\r\n    while(i<=middleIdx){\r\n        animations.push([i,i]);\r\n        animations.push([i,i]);\r\n        animations.push([k,supportArray[i]]);\r\n        mainArray[k++] = supportArray[i++];\r\n    }\r\n    //operation 3\r\n    while(j<=endIdx){\r\n        animations.push([j,j]);\r\n        animations.push([j,j]);\r\n        animations.push([k,supportArray[j]]);\r\n        mainArray[k++] = supportArray[j++];\r\n    }\r\n}\r\n  ","export function getQuickSortAnimations(array){\r\n    const animations =[];\r\n    if(array.length <=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array]//clones array;\r\n    quickSort(0, array.length-1, supportArray, animations);\r\n    return animations;\r\n}\r\n\r\n//do quicksort with recursion \r\nconst quickSort = (low, high, array, animations) => {\r\n    if (low < high) {\r\n        let pi = partition(low, high , array, animations);\r\n        quickSort(low, pi - 1, array, animations);\r\n        quickSort(pi + 1, high, array, animations); \r\n    }\r\n}\r\n\r\nconst partition = (low, high, array, animations) => {\r\n    let i = low, pivot = array[high], j = low;\r\n    //at each iteration of j,\r\n    //swap j with i if j < pivot value, separating values smaller and larger than pivot\r\n    \r\n    for (j; j < array[high - 1]; j++) {\r\n        if (array[j] < pivot) {\r\n            animations.push([i, j, true]);\r\n            animations.push([i, j, true]);\r\n            animations.push([j, i, true]);\r\n            animations.push([j, i, true]);\r\n            animations.push([i, array[j]]);\r\n            animations.push([j, array[i]]);\r\n            let temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    //main partition -- once j reaches array[high -1], swap pivot to value[i];\r\n    animations.push([i, high, true]);\r\n    animations.push([i, high, true]);\r\n    animations.push([high, i, true]);\r\n    animations.push([high, i, true]);\r\n    animations.push([i, array[high]]);\r\n    animations.push([high, array[i]]);\r\n    let temp = array[i];\r\n    array[i] = array[high];\r\n    array[high] = temp;\r\n    return i; \r\n}\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport { getMergeSortAnimations } from '../SortingAlgorithms/mergeSortAlgo.js';\r\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/bubbleSortAlgo';\r\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/insertionSortAlgo';\r\nimport { getQuickSortAnimations } from '../SortingAlgorithms/quickSortAlgo';\r\nimport { Menu, MenuButton, MenuList, MenuItem, Button } from '@chakra-ui/react';\r\nimport { Box, Center, HStack } from '@chakra-ui/react';\r\nimport { ChevronDownIcon } from '@chakra-ui/icons';\r\n\r\n\r\n\r\nconst animationSpeedMs = 8;\r\nconst primaryColor = \"CornflowerBlue\";\r\nconst secondaryColor = \"Aquamarine\";\r\n\r\nexport function SortingVisual() {\r\n    const [array, setArray] = useState(randomArray());\r\n\r\n    useEffect(() => console.log(\"mounted\"), []);\r\n\r\n    const handleResize = () => {\r\n        //handles the change of the array bars when window is resized\r\n    }\r\n\r\n\r\n    //FROM: https://github.com/waitingonalice/Sorting-Visualizer-Tutorial/blob/master/src/sortingAlgorithms/sortingAlgorithms.js \r\n    const handleMergeSort = () => {\r\n        const animations = getMergeSortAnimations(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? secondaryColor : primaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }\r\n    }\r\n    const handleBubbleSort = () => {\r\n        const animations = getBubbleSortAnimations(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = animations[i][2];\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 2 === 0 ? secondaryColor : primaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }\r\n    }\r\n        \r\n    const handleInsertionSort = () => {\r\n        const animations = getInsertionSortAnimations(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = animations[i][2];\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 2 === 0 ? secondaryColor : primaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }\r\n    }\r\n                \r\n    const handleQuickSort = () => {\r\n        const animations = getQuickSortAnimations(array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = animations[i][2];\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? primaryColor : secondaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }\r\n    }     \r\n    const refreshPage = () => {\r\n        window.location.reload(true);\r\n    }\r\n    const handleReset = () => {\r\n        console.log('reset')\r\n        setArray(randomArray());\r\n    }\r\n    //style section\r\n    \r\n    const GenerateNewArrayButton = (generateProp) => {\r\n        return (\r\n            <Button\r\n                colorScheme='gray'\r\n                size='md'\r\n                onClick={generateProp.onClick}>\r\n               Generate new array\r\n            </Button>\r\n        ); \r\n    }\r\n\r\n     const ResetArrayButton = (generateProp) => {\r\n        return (\r\n            <Button\r\n                colorScheme='gray'\r\n                size='md'\r\n                onClick={generateProp.onClick}>\r\n               Reset array\r\n            </Button>\r\n        ); \r\n    }\r\n    \r\n    const DropDownMenu = () => {\r\n        return (\r\n            <Menu>\r\n                <MenuButton as={Button} rightIcon={<ChevronDownIcon />} colorScheme = 'gray'>\r\n                    Sorting Algorithms\r\n                </MenuButton>\r\n                <MenuList>\r\n                    <MenuItem onClick = {() => handleMergeSort()}>Merge Sort</MenuItem>\r\n                    <MenuItem onClick = {() => handleQuickSort()}>Quick Sort</MenuItem>\r\n                    <MenuItem onClick = {() => handleInsertionSort()}>Insertion Sort</MenuItem>\r\n                    <MenuItem onClick = {() => handleBubbleSort()}>Bubble Sort</MenuItem>\r\n                </MenuList>\r\n            </Menu>\r\n    \r\n        )\r\n    }\r\n\r\n    return(\r\n        <Box>\r\n            <Box display ='flex' pt ='10'>\r\n                <Center>\r\n                    <HStack spacing = '40px'>\r\n                        <Box> \r\n                            <GenerateNewArrayButton onClick={handleReset}/>\r\n                        </Box>\r\n                        <Box>\r\n                            <ResetArrayButton onClick = {refreshPage}/>\r\n                        </Box>\r\n                        <Box>\r\n                            <DropDownMenu/>\r\n                        </Box>\r\n                    </HStack>\r\n                </Center> \r\n            </Box>\r\n              \r\n            <Center>\r\n                <Box pos = \"absolute\" top = \"500\">\r\n                    {array.map((value, idx) => (\r\n                        <Box className=\"array-bar\" \r\n                            key={idx}\r\n                            style={{backgroundColor: primaryColor, height: `${value}px`}}> \r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n            </Center>\r\n        </Box>\r\n\r\n    )\r\n}\r\n\r\n//reusable code \r\nconst randomArray = () => {\r\n    const array = [];\r\n    for(let i = 0; i<(window.innerWidth-350)/20; i++){\r\n        array.push(randomIntFromInterval(10,window.innerHeight/2));\r\n    }\r\n    return array;\r\n}\r\n\r\n//FROM: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min,max) {\r\n    return Math.floor(Math.random()*(max - min + 1)+min); \r\n}\r\n\r\nexport default SortingVisual;","export function getBubbleSortAnimations(array){\r\n    const animations =[];\r\n    if(array.length <=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array]//clones array;\r\n    bubbleSort(0,supportArray,animations);\r\n    return animations;\r\n}\r\n\r\n//1. create array to hold values\r\n//2. while the array isnt sorted, iterate through array\r\n//3. if the value of index i > i+1, swap\r\n\r\nfunction bubbleSort(start,array,animations){\r\n    let i = start;\r\n    let j = array.length-1;\r\n    let sorted = false;\r\n    let round = 0;\r\n    while(!sorted){\r\n        sorted = true;\r\n        for(let comparingElement = i; comparingElement < j-round; comparingElement++){\r\n            animations.push([comparingElement, comparingElement + 1, true]); \r\n            animations.push([comparingElement, comparingElement + 1, true]); \r\n            \r\n            if(array[comparingElement]>array[comparingElement+1]){\r\n                animations.push([comparingElement, array[comparingElement + 1]]);\r\n                animations.push([comparingElement + 1, array[comparingElement]]);\r\n                \r\n                let temp = array[comparingElement];\r\n                array[comparingElement] = array[comparingElement + 1];\r\n                array[comparingElement + 1] = temp;\r\n                sorted = false;  \r\n            }   \r\n            \r\n        }\r\n        round++;\r\n    }    \r\n}","export function getInsertionSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length<=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array]; //clones array\r\n    insertionSort(supportArray,animations);\r\n    return animations;\r\n}\r\n// }\r\n//1. iterate from arr[1] to arr [n] over the array\r\n//2. compare current element (key) to its predecessor \r\n//3. if key element is small than its predecessor, compare it to the elements before\r\n//4. move greater one position up to make space for swapped element. \r\n\r\nfunction insertionSort(array,animations){\r\n\r\n    for(let i = 1;i<array.length;i++){\r\n        let temp = array[i];\r\n        let container = i;\r\n        animations.push([container, container - 1,true]);\r\n        animations.push([container, container - 1, true]);\r\n        \r\n        while(container > 0 && array[container - 1] > temp){\r\n            animations.push([container, container - 1,true]);\r\n            animations.push([container, container - 1,true]);\r\n            animations.push([container, array[container -1]]);\r\n            animations.push([container, array[container - 1]]);\r\n            \r\n            array[container] = array[container-1];\r\n            container--;\r\n            \r\n        }\r\n        animations.push([container, temp]);\r\n        animations.push([container, temp]);\r\n        \r\n        array[container] = temp;\r\n    }\r\n\r\n} \r\n\r\n","import React from 'react';\nimport {SortingVisual} from './components/SortingVisual';\nimport { Button, IconButton } from '@chakra-ui/react';\nimport { VStack, Heading } from '@chakra-ui/react'\nimport { useColorMode } from '@chakra-ui/react';\nimport { FaSun, FaMoon } from 'react-icons/fa'\nimport { IconBase } from 'react-icons';\n\nexport default function App() {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <VStack p={4}>\n      <IconButton\n      icon={colorMode === 'dark' ? <FaMoon/> : <FaSun/>}\n      isRound='true'\n      size='md'\n      alignSelf='flex-end'\n      onClick={toggleColorMode} \n      />\n\n      <Heading>\n        Visual Algo\n     </Heading>\n\n      <SortingVisual/> \n      \n\n    </VStack>\n  );\n}\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider, ColorModeScript, extendTheme } from \"@chakra-ui/react\"\nimport react from 'react';\n\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\nconst theme = extendTheme({\n  config,\n});\n\nReactDOM.render(\n  <react.StrictMode>\n    <ChakraProvider>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode}/>\n      <App />\n    </ChakraProvider>\n  </react.StrictMode>\n  ,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}