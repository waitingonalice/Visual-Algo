{"version":3,"sources":["SortingAlgorithms/mergeSortAlgo.js","SortingVisualizer/SortingVisual.jsx","SortingAlgorithms/bubbleSortAlgo.js","SortingAlgorithms/insertionSortAlgo.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","supportArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","mergeSort","animationSpeedMs","primaryColor","secondaryColor","GenerateNewArray","useState","randomArray","setArray","useEffect","console","log","handleBubbleSort","start","sorted","round","comparingElement","temp","bubbleSort","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","handleInsertionSort","container","insertionSort","getInsertionSortAnimations","className","onClick","window","location","reload","handleMergeSort","map","value","idx","min","max","innerWidth","random","SortingVisual","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e8d9315.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if(array.length<=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array];\r\n    mergeSortHelper(array, 0, array.length-1, supportArray, animations);\r\n    return animations; \r\n}\r\n\r\n//swaps mainArray with supportArray during merge sort\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, supportArray, animations){\r\n    if(startIdx===endIdx){\r\n        return;\r\n    }\r\n    const middleIdx = Math.floor((startIdx+endIdx)/2);\r\n    mergeSortHelper(supportArray, startIdx, middleIdx, mainArray, animations); \r\n    //swaps first half of mainArray with supportArray\r\n    mergeSortHelper(supportArray, middleIdx+1, endIdx, mainArray, animations); \r\n    //swaps second half of mainArray with SupportArray\r\n    mergeSort(mainArray,startIdx,middleIdx,endIdx,supportArray,animations);\r\n}\r\n\r\nfunction mergeSort(mainArray,startIdx,middleIdx,endIdx,supportArray,animations){\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n\r\n    //operation 1\r\n    while(i <= middleIdx && j <=endIdx){\r\n        animations.push([i,j]); //push index i and j into animations array once to change color \r\n        animations.push([i,j]); //push index i and j into animations array a second time to revert color\r\n        if(supportArray[i]<=supportArray[j]){\r\n            animations.push([k,supportArray[i]]);\r\n            mainArray[k++] = supportArray[i++];\r\n            //swap then increment to the next index\r\n        }else{\r\n            animations.push([k,supportArray[j]]);\r\n            mainArray[k++] = supportArray[j++];\r\n        }\r\n    }\r\n    //operation 2\r\n    while(i<=middleIdx){\r\n        animations.push([i,i]);\r\n        animations.push([i,i]);\r\n        animations.push([k,supportArray[i]]);\r\n        mainArray[k++] = supportArray[i++];\r\n    }\r\n    //operation 3\r\n    while(j<=endIdx){\r\n        animations.push([j,j]);\r\n        animations.push([j,j]);\r\n        animations.push([k,supportArray[j]]);\r\n        mainArray[k++] = supportArray[j++];\r\n    }\r\n}\r\n  ","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport { getMergeSortAnimations } from '../SortingAlgorithms/mergeSortAlgo.js';\r\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/bubbleSortAlgo';\r\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/insertionSortAlgo';\r\n\r\nconst animationSpeedMs = 15;\r\n\r\nconst primaryColor = \"orange\";\r\n\r\nconst secondaryColor = \"turquoise\";\r\n\r\n\r\n\r\nfunction GenerateNewArray(){\r\n    const[array, setArray] = useState(randomArray());\r\n\r\n    useEffect(() => console.log(\"mounted\"),[]);\r\n\r\n//FROM: https://github.com/waitingonalice/Sorting-Visualizer-Tutorial/blob/master/src/sortingAlgorithms/sortingAlgorithms.js \r\n    const handleMergeSort = () => {  \r\n        const animations = getMergeSortAnimations(array);\r\n        for(let i = 0; i<animations.length;i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i%3 !== 2;\r\n            if(isColorChange){     \r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i%3 === 0 ? primaryColor : secondaryColor;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * animationSpeedMs);\r\n            }else{\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * animationSpeedMs);\r\n            }\r\n        }}\r\n        const handleBubbleSort = () => {  \r\n            const animations = getBubbleSortAnimations(array);\r\n            for(let i = 0; i<animations.length;i++){\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n                const isColorChange = animations[i][2];\r\n                if(isColorChange){     \r\n                    const [barOneIdx, barTwoIdx] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                    const color = i%2 === 0 ? primaryColor : secondaryColor;\r\n                    setTimeout(() => {\r\n                        barOneStyle.backgroundColor = color;\r\n                        barTwoStyle.backgroundColor = color;\r\n                    }, i * animationSpeedMs);\r\n                }else{\r\n                    setTimeout(() => {\r\n                        const [barOneIdx, newHeight] = animations[i];\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        barOneStyle.height = `${newHeight}px`;\r\n                    }, i * animationSpeedMs);\r\n                }\r\n            }}\r\n        \r\n            const handleInsertionSort = () => {  \r\n                const animations = getInsertionSortAnimations(array);\r\n                for(let i = 0; i<animations.length;i++){\r\n                    const arrayBars = document.getElementsByClassName('array-bar');\r\n                    const isColorChange = animations[i][2];\r\n                    if(isColorChange){     \r\n                        const [barOneIdx, barTwoIdx] = animations[i];\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        const color = i%2 === 0 ? primaryColor : secondaryColor;\r\n                        setTimeout(() => {\r\n                            barOneStyle.backgroundColor = color;\r\n                            barTwoStyle.backgroundColor = color;\r\n                        }, i * animationSpeedMs);\r\n                    }else{\r\n                        setTimeout(() => {\r\n                            const [barOneIdx, newHeight] = animations[i];\r\n                            const barOneStyle = arrayBars[barOneIdx].style;\r\n                            barOneStyle.height = `${newHeight}px`;\r\n                        }, i * animationSpeedMs);\r\n                    }\r\n                }}\r\n\r\n        const handleReset = () => {\r\n            console.log('reset')\r\n            setArray(randomArray());\r\n        }\r\n\r\n        const refreshPage = () => {\r\n            window.location.reload(true);\r\n        }\r\n    \r\n    return(\r\n        <div>\r\n            \r\n            <div className = \"array-container\">\r\n            <div className=\"buttons\">   \r\n                <button onClick = {() => refreshPage()}>Reset array</button>\r\n                <button onClick = {() => handleReset()}>Generate new Array</button>\r\n                <button onClick = {() => handleMergeSort()}>Merge Sort</button>\r\n                <button>Quick Sort</button>\r\n                <button onClick={() => handleInsertionSort()}>Insertion Sort</button>\r\n                <button onClick = {() => handleBubbleSort()}>Bubble Sort</button>\r\n            </div>\r\n                {array.map((value, idx) => (\r\n                    <div className = \"array-bar\" \r\n                    key={idx}\r\n                    style={{backgroundColor: primaryColor, height: `${value}px`}}> \r\n                    </div>\r\n                ))}\r\n            </div>\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst randomArray = () => {\r\n    const array = [];\r\n    for(let i = 0; i<(window.innerWidth-300)/30; i++){\r\n        array.push(randomIntFromInterval(5,600));\r\n    }\r\n    return array;\r\n}\r\n\r\n//FROM: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min,max) {\r\n    return Math.floor(Math.random()*(max-min+1)+min); \r\n}\r\n\r\nexport default function SortingVisual(){\r\n    return( \r\n        <>\r\n            <GenerateNewArray></GenerateNewArray>\r\n        </>\r\n    );\r\n}","export function getBubbleSortAnimations(array){\r\n    const animations =[];\r\n    if(array.length <=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array]//clones array;\r\n    bubbleSort(0,supportArray,animations);\r\n    return animations;\r\n}\r\n\r\n//1. create array to hold values\r\n//2. while the array isnt sorted, iterate through array\r\n//3. if the value of index i > i+1, swap\r\n\r\nfunction bubbleSort(start,array,animations){\r\n    let i = start;\r\n    let j = array.length-1;\r\n    let sorted = false;\r\n    let round = 0;\r\n    while(!sorted){\r\n        sorted = true;\r\n        for(let comparingElement = i; comparingElement < j-round; comparingElement++){\r\n            animations.push([comparingElement, comparingElement+1,true]); \r\n            animations.push([comparingElement, comparingElement+1,true]); \r\n            if(array[comparingElement]>array[comparingElement+1]){\r\n                animations.push([comparingElement, array[comparingElement+1]]);\r\n                animations.push([comparingElement+1, array[comparingElement]]);\r\n                let temp = array[comparingElement];\r\n                array[comparingElement] = array[comparingElement+1];\r\n                array[comparingElement+1] = temp;\r\n                sorted = false;  \r\n            }   \r\n            \r\n        }\r\n        round++;\r\n    }    \r\n}","export function getInsertionSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length<=1){\r\n        return array;\r\n    }\r\n    const supportArray = [...array]; //clones array\r\n    insertionSort(supportArray,animations);\r\n    return animations;\r\n}\r\n// }\r\n//1. iterate from arr[1] to arr [n] over the array\r\n//2. compare current element (key) to its predecessor \r\n//3. if key element is small than its predecessor, compare it to the elements before\r\n//4. move greater one position up to make space for swapped element. \r\n\r\nfunction insertionSort(array,animations){\r\n\r\n    for(let i = 1;i<array.length;i++){\r\n        let temp = array[i];\r\n        let container = i;\r\n        animations.push([container, container - 1,true]);\r\n        animations.push([container, container - 1,true]);\r\n        while(container > 0 && array[container - 1] > temp){\r\n            animations.push([container, container - 1,true]);\r\n            animations.push([container, container - 1,true]);\r\n            animations.push([container, array[container -1]]);\r\n            animations.push([container, array[container -1]]);\r\n            array[container] = array[container-1];\r\n            container--;\r\n            \r\n        }\r\n        animations.push([container, temp]);\r\n        animations.push([container, temp]);\r\n        array[container] = temp;\r\n    }\r\n\r\n} \r\n\r\n","import React from 'react';\nimport './App.css';\n//import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport SortingVisual from './SortingVisualizer/SortingVisual';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisual/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}